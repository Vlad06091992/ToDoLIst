{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","addTasks","id","className","onClick","removeTodolist","value","onChange","event","currentTarget","onKeyDown","key","tasks","map","el","isDone","type","newIsDoneValue","checked","changeTaskStatus","DeleteTask","filter","ChangeFilter","App","todolist1","v1","todolist2","todolists","setTodolists","setTask","todolistId","change","taskId","task","find","todolist","newTask","AllCurrentTask","tasksForTodoLists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0797fc2c.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {TasksArrayType} from \"./App\";\r\nimport {FilterType} from \"./App\";\r\nimport {KeyboardEvent} from \"react\";\r\nimport './App.css';\r\n\r\ntype TodolistProps = {\r\n    removeTodolist: (todolistId: string) => void\r\n    id: string\r\n    title: string,\r\n    tasks: Array<TaskType>,\r\n    DeleteTask: (todolistId: string, taskId: string) => void\r\n    ChangeFilter: (value: FilterType, taskId: string) => void\r\n    addTasks: (task: string, taskId: string) => void\r\n    changeTaskStatus: (todolistId: string, change: boolean, taskId: string) => void\r\n    filter: FilterType\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\nexport const Todolist = (props: TodolistProps) => {\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (event: any) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() != '') {\r\n            props.addTasks(title.trim(), props.id)\r\n            setTitle('')\r\n        } else {\r\n            setError(\"error\")\r\n        }\r\n    }\r\n    const onKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (event.key === \"Enter\") {\r\n            addTask()\r\n        }\r\n    }\r\n    const onAllClickHandler = () => {\r\n        props.ChangeFilter(\"all\", props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.ChangeFilter(\"active\", props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.ChangeFilter(\"complete\", props.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>{props.title}</h3>\r\n                <button onClick={() => props.removeTodolist(props.id)}>x</button>\r\n\r\n                <div>\r\n                    <input value={title}\r\n                           onChange={onChangeHandler}\r\n                           onKeyDown={onKeyDownHandler}\r\n                           className={error ? \"error\" : \"\"}\r\n                    />\r\n                    <button onClick={addTask}>+</button>\r\n                    {error && <div className={error ? \"error-message\" : \"\"}>Title is required</div>}\r\n                </div>\r\n                <ul>\r\n                    {props.tasks.map((el: TaskType) => {\r\n                        const onChangeCheckHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                            let newIsDoneValue = event.currentTarget.checked\r\n                            props.changeTaskStatus(props.id, newIsDoneValue, el.id)\r\n                        }\r\n                        return (\r\n                            <li key={el.id} className={el.isDone ? \"is-done\" : \"\"}>\r\n                                <input type=\"checkbox\" onChange={onChangeCheckHandler} checked={el.isDone}/>\r\n                                <span>{el.title}</span>\r\n                                <button onClick={() => {\r\n                                    props.DeleteTask(props.id, el.id)\r\n                                }}>x\r\n                                </button>\r\n                            </li>\r\n\r\n                        )\r\n                    })}\r\n                </ul>\r\n                <div>\r\n                    <button className={props.filter == 'all' ? \"active-filter\" : \"\"} onClick={onAllClickHandler}>All\r\n                    </button>\r\n                    <button className={props.filter == 'active' ? \"active-filter\" : \"\"}\r\n                            onClick={onActiveClickHandler}>Active\r\n                    </button>\r\n                    <button className={props.filter == 'complete' ? \"active-filter\" : \"\"}\r\n                            onClick={onCompletedClickHandler}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {TaskType} from \"./Todolist\";\r\nimport {useState} from \"react\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type TasksArrayType = Array<TaskType>\r\nexport type FilterType = \"all\" | \"active\" | \"complete\"\r\n\r\n\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TaskObjType = {\r\n    [key: string]: TasksArrayType\r\n}\r\n\r\nfunction App() {\r\n    const todolist1 = v1()\r\n    const todolist2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolist1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolist2, title: \"What to buy\", filter: \"complete\"},\r\n    ])\r\n\r\n    let [tasks, setTask] = useState<TaskObjType>({\r\n        [todolist1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true,},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"VueJS\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Angular\", isDone: true},\r\n            {id: v1(), title: \"LESS\", isDone: false}\r\n        ],\r\n        [todolist2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true,},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function removeTodolist(todolistId: string) {\r\n\r\n        setTodolists(todolists.filter(el => el.id != todolistId))\r\n        delete tasks[todolistId]\r\n        setTask({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(todolistId: string, change: boolean, taskId: string) {\r\n\r\n        let task = tasks[todolistId].find(el => el.id == taskId)\r\n        if (task) {\r\n            task.isDone = !task.isDone\r\n            setTask({...tasks})\r\n        }\r\n    }\r\n\r\n    function DeleteTask(todolistId: string, taskId: string) {\r\n        tasks[todolistId] = tasks[todolistId].filter(el => taskId != el.id)\r\n        setTask({...tasks})\r\n    }\r\n\r\n    function ChangeFilter(value: FilterType, taskId: string) {\r\n        let todolist = todolists.find(el => el.id == taskId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n        }\r\n        setTodolists([...todolists])\r\n    }\r\n\r\n    function addTasks(title: string, taskId: string) {\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false,}\r\n        tasks[taskId] = [newTask, ...tasks[taskId]]\r\n        setTask({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((el: TodolistsType) => {\r\n\r\n                let AllCurrentTask = tasks[el.id]    //массив тасок\r\n\r\n                let tasksForTodoLists = AllCurrentTask   //массив отфильтрованных тасок\r\n\r\n                if (el.filter == \"all\") {\r\n                    tasksForTodoLists = AllCurrentTask\r\n                }\r\n                if (el.filter == \"complete\") {\r\n                    tasksForTodoLists = AllCurrentTask.filter(el => el.isDone == true)\r\n                }\r\n                if (el.filter == \"active\") {\r\n                    tasksForTodoLists = AllCurrentTask.filter(el => el.isDone == false)\r\n                }\r\n\r\n                return <Todolist\r\n                    key={el.id}\r\n                    id={el.id}\r\n                    title={el.title}\r\n                    filter={el.filter}\r\n                    tasks={tasksForTodoLists}\r\n                    DeleteTask={DeleteTask}\r\n                    ChangeFilter={ChangeFilter}\r\n                    addTasks={addTasks}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodolist={removeTodolist}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
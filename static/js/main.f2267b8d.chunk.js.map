{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","className","TextField","label","placeholder","value","onChange","event","currentTarget","onKeyDown","key","addItem","trim","helperText","IconButton","onClick","color","EditableSpan","status","setStatus","onBlurEditableSpanHandler","changeTitle","onDoubleClick","autoFocus","onBlur","e","console","log","onKeyPress","Todolist","todolistElements","tasks","map","el","ListItem","style","padding","id","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","todolistId","changeTaskTitle","size","removeTask","changeTodolistTitle","removeTodolist","addTask","length","List","Button","variant","filter","ChangeFilter","margin","App","todolist1","v1","todolist2","todolists","setTodolists","setTask","change","taskId","task","find","t","newTask","ChangeTodolistFilter","todolist","todolistComponents","AllCurrentTask","tasksForTodoLists","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","paddingTop","container","newTodolistId","newTodolist","spacing","marginTop","Boolean","window","location","hostname","match","theme","createTheme","palette","primary","main","secondary","type","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f2267b8d.chunk.js","sourcesContent":["import React, {KeyboardEvent, useState} from \"react\";\r\nimport './App.css';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport PlusOneIcon from '@material-ui/icons/PlusOne';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    placeholder:string\r\n    addItem:(title: string)=>void\r\n\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeSetLocalItem = (event: any) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onClickAddItem = () => {\r\n        if (title.trim() != '') {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError(\"error\")\r\n        }\r\n    }\r\n\r\n    const onKeyDownEnterAddItem = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (event.key === \"Enter\") {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n\r\n            <div className={\"flex\"}>\r\n                <TextField label={props.placeholder}\r\n                           value={title}\r\n                           onChange={onChangeSetLocalItem}\r\n                           onKeyDown={onKeyDownEnterAddItem}\r\n                           error={!!error}\r\n                           helperText={error? \"Ttile is required\" : \"\"}\r\n                />\r\n\r\n                <IconButton onClick={onClickAddItem} >\r\n                  <PlusOneIcon color={\"primary\"}/>\r\n                </IconButton>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}","import {KeyboardEvent, useState} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    let [status, setStatus] = useState<boolean>(false)\r\n\r\n    const onChangeEditableSpanHandler = (e: any) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(title)\r\n    }\r\n\r\n    const onBlurEditableSpanHandler = (title: string) => {\r\n        status && setStatus(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyDownEnterAddItem = (event: KeyboardEvent<HTMLInputElement>) => {\r\n\r\n        if (event.key === \"Enter\") {\r\n            onBlurEditableSpanHandler(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!status && <span onDoubleClick={() => setStatus(true)}>{props.title}</span>}\r\n            {status && <input value={title}\r\n                              autoFocus\r\n                              onBlur={() => onBlurEditableSpanHandler(title)}\r\n                              onChange={onChangeEditableSpanHandler}\r\n                              onKeyPress={onKeyDownEnterAddItem}/>}\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {FilterType} from \"./App\";\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem, Paper} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\ntype TodolistProps = {\r\n    removeTodolist: (todolistId: string) => void\r\n    todolistId: string\r\n    title: string,\r\n    tasks: Array<TaskType>,\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    ChangeFilter: (value: FilterType, taskId: string) => void\r\n    addTask: (task: string, taskId: string) => void\r\n    changeTaskStatus: (todolistId: string, change: boolean, taskId: string) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, title: string) => void\r\n    changeTodolistTitle: (title: string, todoListId: string) => void\r\n    filter: FilterType\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\n\r\nexport const Todolist = (props: TodolistProps) => {\r\n    function addTask(title: string) {\r\n        props.addTask(title, props.todolistId)\r\n    }\r\n\r\n    function changeTodolistTitle(title: string) {\r\n        props.changeTodolistTitle(title, props.todolistId)\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.ChangeFilter(\"all\", props.todolistId)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.ChangeFilter(\"active\", props.todolistId)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.ChangeFilter(\"complete\", props.todolistId)\r\n    }\r\n\r\n    const removeTodoloist = () => {\r\n        props.removeTodolist(props.todolistId)\r\n    }\r\n\r\n    const todolistElements = props.tasks.map((el: TaskType) => {\r\n        const changeTaskStatus = (event: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = event.currentTarget.checked\r\n            props.changeTaskStatus(props.todolistId, newIsDoneValue, el.id)\r\n        }\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(props.todolistId, el.id, title)\r\n        }\r\n        const removeTask = () => {\r\n            props.removeTask(props.todolistId, el.id)\r\n        }\r\n        return (\r\n\r\n            <ListItem style={{padding: \"0\"}}\r\n                      key={el.id}\r\n                      className={el.isDone ? \"is-done\" : \"\"}>\r\n                <div className={\"flex\"}>\r\n                    <Checkbox\r\n                        color={\"primary\"}\r\n                        checked={el.isDone}\r\n                        onChange={changeTaskStatus}\r\n                    />\r\n                    <EditableSpan\r\n                        title={el.title}\r\n                        changeTitle={changeTaskTitle}/>\r\n                    <IconButton size={\"small\"} onClick={removeTask}>\r\n                        <DeleteIcon/>\r\n                    </IconButton>\r\n                </div>\r\n            </ListItem>\r\n\r\n\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n<div className=\"flex\">\r\n            <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodoloist}>\r\n                <DeleteForeverIcon/>\r\n            </IconButton>\r\n</div>\r\n            <AddItemForm\r\n                placeholder=\"Add task\"\r\n                addItem={addTask}/>\r\n            {props.tasks.length > 0 ? <List>{todolistElements}</List> : <div>This list is empty</div>}\r\n            <div>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter == 'all' ? \"secondary\" : \"primary\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button style={{margin: \"10px\"}}\r\n                        variant={\"contained\"}\r\n                        color={props.filter == 'active' ? \"secondary\" : \"primary\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter == 'complete' ? \"secondary\" : \"primary\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {TaskType} from \"./Todolist\";\r\nimport {useState} from \"react\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TasksArrayType = Array<TaskType>\r\nexport type FilterType = \"all\" | \"active\" | \"complete\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\nexport type TodolistsType = TodolistType[]\r\n\r\ntype TaskObjType = {\r\n    [key: string]: TasksArrayType\r\n}\r\n\r\nfunction App() {\r\n    const todolist1 = v1()\r\n    const todolist2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<TodolistsType>([\r\n        {id: todolist1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolist2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    let [tasks, setTask] = useState<TaskObjType>({\r\n        [todolist1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true,},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"VueJS\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Angular\", isDone: true},\r\n            {id: v1(), title: \"LESS\", isDone: false}\r\n        ],\r\n        [todolist2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true,},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n    function changeTaskStatus(todolistId: string, change: boolean, taskId: string) {\r\n\r\n        let task = tasks[todolistId].find(el => el.id == taskId)\r\n        if (task) {\r\n            task.isDone = !task.isDone\r\n            setTask({...tasks})\r\n        }\r\n    }\r\n    function changeTaskTitle(todolistId: string, taskId: string, title: string) {\r\n        setTask({...tasks, [todolistId]: tasks[todolistId].map(t => t.id == taskId ? {...t, title} : t)})\r\n\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false,}\r\n        setTask({...tasks, [todolistId]: tasks[todolistId] = [newTask, ...tasks[todolistId]]})\r\n    }\r\n    function removeTask(todolistId: string, taskId: string) {\r\n        tasks[todolistId] = tasks[todolistId].filter(el => taskId != el.id)\r\n        setTask({...tasks})\r\n    }\r\n\r\n\r\n    function addTodolist(title: string) {\r\n        const newTodolistId = v1()\r\n        const newTodolist: TodolistType = {id: newTodolistId, title: title, filter: \"all\"}\r\n        setTodolists([...todolists, newTodolist])\r\n        setTask({...tasks, [newTodolistId]: []})\r\n\r\n    }\r\n    function removeTodolist(todolistId: string) {\r\n        setTodolists(todolists.filter(el => el.id != todolistId))\r\n        delete tasks[todolistId]\r\n        setTask({...tasks})\r\n    }\r\n    function ChangeTodolistFilter(value: FilterType, todolistId: string) {\r\n        let todolist = todolists.find(el => el.id == todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n        }\r\n        setTodolists([...todolists])\r\n    }\r\n    function changeTodolistTitle(title:string,todolistId:string){\r\n        setTodolists(todolists.map(el => el.id === todolistId ? {...el, title:title}: el))\r\n    }\r\n\r\n    const todolistComponents = todolists.map((el: TodolistType) => {\r\n        let AllCurrentTask = tasks[el.id]    //массив тасок\r\n        let tasksForTodoLists = AllCurrentTask   //массив отфильтрованных тасок\r\n\r\n        if (el.filter == \"all\") {\r\n            tasksForTodoLists = AllCurrentTask\r\n        }\r\n        if (el.filter == \"complete\") {\r\n            tasksForTodoLists = AllCurrentTask.filter(el => el.isDone == true)\r\n        }\r\n        if (el.filter == \"active\") {\r\n            tasksForTodoLists = AllCurrentTask.filter(el => el.isDone == false)\r\n        }\r\n        return (\r\n            <Grid item key={el.id}>\r\n                <Paper\r\n                    elevation={5}\r\n                    style={{\r\n                        padding: \"10px\"\r\n                    }}>\r\n                    <Todolist\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        key={el.id}\r\n                        todolistId={el.id}\r\n                        title={el.title}\r\n                        filter={el.filter}\r\n                        tasks={tasksForTodoLists}\r\n                        removeTask={removeTask}\r\n                        ChangeFilter={ChangeTodolistFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true} style={{paddingTop: \"20px\"}}>\r\n                <Grid container={true}>\r\n                    <AddItemForm placeholder=\"Add todolist\" addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container={true}\r\n                      spacing={4}\r\n                      style={{marginTop: \"10px\"}}\r\n                >{todolistComponents}</Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createTheme, CssBaseline, ThemeProvider} from \"@material-ui/core\";\r\nimport {amber, green} from \"@material-ui/core/colors\";\r\n\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ed3f00'\r\n        },\r\n        secondary: {\r\n            main: '#0044ff'\r\n        },\r\n       type:\"dark\"\r\n}});\r\n\r\n\r\n// const theme = createTheme({\r\n//     palette: {\r\n//         primary: green,\r\n//         secondary: amber,\r\n//         type:\"dark\"\r\n//     },\r\n// });\r\n\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n      <CssBaseline>\r\n          <App/>\r\n\r\n      </CssBaseline>\r\n\r\n  </ThemeProvider>\r\n\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}